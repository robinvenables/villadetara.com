name: Deploy staging.villadetara.com

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: ${{ vars.HUGO_VERSION }}
      LOG_LEVEL: ${{ vars.LOG_LEVEL }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_USER: ${{ secrets.SSH_USER }}        
      WEBSITE: ${{ vars.WEBSITE }}

    steps:
    - name: Setup environment
      run: |
        BASE_URL="https://staging.${WEBSITE}"
        echo "BASE_URL=${BASE_URL}" >> ${GITHUB_ENV}
        REMOTE_HOST="${SSH_USER}@staging.${WEBSITE}"
        echo "REMOTE_HOST=${REMOTE_HOST}" >> ${GITHUB_ENV}
        SSH_OPTIONS="-p ${SSH_PORT} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /home/runner/.ssh/id_ed25519"
        echo "SSH_OPTIONS=${SSH_OPTIONS}" >> ${GITHUB_ENV}
        RSYNC_OPTIONS="--compress --delete --recursive --rsh=\"ssh ${SSH_OPTIONS}\" --verbose"
        echo "RSYNC_OPTIONS=${RSYNC_OPTIONS}" >> ${GITHUB_ENV}
        TRANSFER_DIR="staging.${WEBSITE}/public"
        echo "TRANSFER_DIR=${TRANSFER_DIR}" >> ${GITHUB_ENV}
        WEBSITE_DIR="/volume1/web/staging.${WEBSITE}"
        echo "WEBSITE_DIR=${WEBSITE_DIR}" >> ${GITHUB_ENV}

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Install Hugo      
      run: |
        wget https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_Linux-64bit.tar.gz
        tar -xzf hugo_extended_${HUGO_VERSION}_Linux-64bit.tar.gz
        sudo mv hugo /usr/local/bin/

    - name: Build website
      env:
        BASE_URL: ${{ env.BASE_URL}}
      run: hugo --environment staging --minify --baseURL ${BASE_URL} --logLevel ${LOG_LEVEL}

    - name: Setup SSH key
      run: |
        mkdir /home/runner/.ssh
        chmod 700 /home/runner/.ssh
        echo "${SSH_PRIVATE_KEY}" > /home/runner/.ssh/id_ed25519
        chmod 600 /home/runner/.ssh/id_ed25519

    - name: rsync to Synology NAS
      env:
        REMOTE_HOST: ${{ env.REMOTE_HOST }}
        RSYNC_OPTIONS: ${{ env.RSYNC_OPTIONS }}
      run: rsync ${RSYNC_OPTIONS} public/* ${REMOTE_HOST}:${TRANSFER_DIR}

    - name: Copy to website directory
      env:
        REMOTE_HOST: ${{ env.REMOTE_HOST }}
        SSH_OPTIONS: ${{ env.SSH_OPTIONS }}
      run: ssh ${SSH_OPTIONS} ${REMOTE_HOST} "sudo cp -pr ${TRANSFER_DIR}/* ${WEBSITE_DIR}"
